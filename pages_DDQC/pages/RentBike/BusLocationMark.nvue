<template>
	<view class="content">
		<map id="map" ref='map' class="map" :style="{height:mapHeight}" :latitude="centerLatitude" :longitude="centerLongitude"
		 :markers="markers" :show-location="showLocation" :scale="scale" :polyline="polyline" :controls="controls"
		 @regionchange='mapChange' @markertap='markertap'>
			<cover-image src="../../../static/Home/icon_position.png" class="icon-img" :style="{bottom:Height}"></cover-image>
		</map>
	</view>
</template>

<script>
	var _self;
	import $DDTInterface from '@/common/DDT.js'
	export default {
		data() {
			return {
				Height: '',
				mapHeight: '', //地图高度
				centerLatitude: "24.517346", //地图中心点纬度
				centerLongitude: "117.6536981221", //地图中心点经度
				markers: [], //标记点坐标数组
				polyline: [{
					points: [],
					color: "#669253",
					width: 2,
					arrowLine: true,
				}], //规划的线
				showLocation: true,
				scale: 18, //地图缩放比例,值越小地图可视范围越大
				polyline: [], //画线数组
				currentLatitude: '', //当前纬度
				currentLongitude: '', //当前经度
				busIconPath: '../../static/RentBike/bicycleGreen.png',
				//标识宽高
				iconWidth: 40,
				iconHeight: 40,
				markArray:[],//放置周围公交站点
			}
		},
		onBackPress(options) {
			//监听导航栏的返回键，由于租车页面的导航栏是自定义导航栏，在这个页面直接返回的话会直接回到首页，故在这里做监听的操作
			if (options.from === 'navigateBack') {
				return false;
			}
			_self.back();
			return true;
		},
		onLoad() {
			_self = this;
			//获取系统信息
			uni.getSystemInfo({
				success: function(res) {
					//地图高度
					_self.mapHeight = res.windowHeight + 'px';
					_self.Height = res.windowHeight / 2 - 4 + 'px';
				}
			});
			_self.getMyLocation();
		},
		methods: {
			//-------------------------------返回租车页-------------------------------
			//由于租车页面的导航栏是自定义导航栏，在这个页面直接返回的话会直接回到首页，故在这里做返回租车页的操作
			back: function() {
				uni.navigateTo({
					url: './RentBikeHome'
				})
			},
			//-------------------------------获取自身位置-------------------------------
			getMyLocation: function() {
				var that = this;
				uni.getLocation({
					//type默认为wgs84返回gps坐标,gcj02返回国测局坐标,可用于uni.openLocation的坐标
					type: "gcj02",
					//是否解析地址信息，默认false
					geocode: true,
					success: function(res) {
						_self.currentLongitude = res.longitude; //--纬度
						_self.currentLatitude = res.latitude; //--经度
						_self.getBusStationInfoByLonLat(res.longitude, res.latitude)
					},
					fail(res) {
						that.isLocation = false;
						uni.showModal({
							title: '温馨提示',
							content: '获取位置失败，请打开定位',
							showCancel: false
						})
					}
				});
			},
			//-------------------------------获取地图中心坐标信息-------------------------------
			mapChange: function(e) {
				var that = this;
				if (e.type == 'regionchange' || e.type == 'end') {
					that.mapContext = uni.createMapContext('map')
					that.mapContext.getCenterLocation({
						success: res => {
							//当地图移动的时候，改变坐标显示周围的车辆位置信息
							_self.getBusStationInfoByLonLat(res.longitude, res.latitude)
							_self.centerLatitude = res.latitude
							_self.centerLongitude = res.longitude
							_self.polyline = [];
						}
					})
				}
			},
			//-------------------------------根据经纬度获取周围站点-------------------------------
			getBusStationInfoByLonLat: function(lon, lat) {
				uni.showLoading({
					title: '加载中...',
					mask: true
				})
				uni.request({
					url: $DDTInterface.DDTInterface.getBusStationInfoByLonLat.Url,
					method: $DDTInterface.DDTInterface.getBusStationInfoByLonLat.method,
					data: {
						lon: lon,
						lat: lat,
						encryption: 'XMJDTzzbustyhl',
					},
					success(res) {
						// console.log('获取站点坐标成功',res)
						uni.hideLoading()
						if(res.data){
							_self.markArray = res.data;
							//请求数据成功之后先清空之前的数据
							_self.markers = [];
							for (var i = 0; i < res.data.length; i++) {
								//---------------------华丽的分割线，分割线中为绘制坐标点的方法---------------------------
								//创建绘制坐标点的对象marker
								var marker = new Object();
								//冒泡显示文本 ---  可租数量，可还数量，可用时长
								var content = res.data[i].stationName + '\n' + '距离：' + (res.data[i].distance * 1000).toFixed(1)+ '米';
								marker = {
									id: res.data[i].stationID,
									latitude: res.data[i].lat,
									longitude: res.data[i].lon,
									iconPath: _self.busIconPath, //标识显示的图片
									width: _self.iconWidth,
									height: _self.iconHeight,
									callout: {
										content: content, //文本res.data.data[i].name
										color: '#65C36D', //文字颜色
										fontSize: 14, //文本大小
										borderRadius: 6, //边框圆角
										bgColor: '#FFFFFF', //背景颜色
										display: 'BYCLICK', //'BYCLICK':点击显示; 'ALWAYS':常显
										padding: 5,
										textAlign: 'center',
									},
								}
								var json = JSON.stringify(_self.markers);
								var arr = JSON.parse(json);
								arr.push(marker);
								//当标记点加载完之后重新设置地图比例
								_self.markers = arr;
								//---------------------华丽的分割线--------------------------------------
							}
						}
					},
					fail(res) {
						console.log('获取站点坐标失败',res)
					}
				})
			},
			//-------------------------------点击标记点-------------------------------
			markertap:function(e){
				// console.log('点击了标记点',e)
				//当前位置的经纬度
				var currentlocation = _self.numFilter(_self.currentLongitude) + ',' + _self.numFilter(_self.currentLatitude)
				// var currentlocation = _self.numFilter(_self.centerLongitude) + ',' + _self.numFilter(_self.centerLatitude)
				for(let i = 0;i<_self.markArray.length;i++){
					//检索站点ID
					if(e.detail.markerId == _self.markArray[i].stationID){
						var markLocation = _self.numFilter(_self.markArray[i].lon) + ',' + _self.numFilter(_self.markArray[i].lat)
						uni.request({
							url:$DDTInterface.DDTInterface.getPlanningWalkLineByLonLat.Url,
							method:$DDTInterface.DDTInterface.getPlanningWalkLineByLonLat.method,
							data:{
								startLonLat:currentlocation,
								endLonLat:markLocation
							},
							success(res) {
								_self.points = [];
								_self.polyline = [];
								var polylineArr = res.data.Polyline;
								var points = [];
								for (var i = 0; i < polylineArr.length; i++) {
									var arr = polylineArr[i].split(';');
									for (var j = 0; j < arr.length; j++) {
										points.push(arr[j]);
									}
								}
								//根据文件建设对象经纬度数组
								for (var i = 0; i < points.length; i++) {
									var arr = points[i].split(',');
									var obj = {
										longitude: arr[0],
										latitude: arr[1]
									}
									_self.points.push(obj);
								}
								var obj = {
									points: _self.points,
									color: "#4bdc27",
									arrowLine: true,
									width: 6
								};
								_self.polyline.push(obj);
							},
							fail(res) {
								console.log('获取规划线路失败',res)
							}
						})
					}
				}
			},
			numFilter(value){
				if(value.length < 9){
					//如果传过来的经纬度长度小于8位就返回原来的经纬度
					return value
				}else {
					//截取当前位数到小数点后六位
					let tempVal = parseFloat(value).toFixed(6)
					let realVal = tempVal.substring(0,tempVal.length-1)
					return realVal
				}
			}
		}
	}
</script>

<style>
	.content {
		width: 750rpx;
		background-color: #FFFFFF;
	}

	.map {
		width: 750rpx;
	}

	.icon-img {
		width: 36px;
		height: 36px;
		position: fixed;
		left: 375rpx;
		transform: translate(-50%, -50%);
	}
</style>
